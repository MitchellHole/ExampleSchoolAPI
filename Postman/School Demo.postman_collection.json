{
	"info": {
		"_postman_id": "73acc899-e845-4adc-85f9-3b3327bdca25",
		"name": "School Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tokens",
			"item": [
				{
					"name": "POST Principal Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let token = response.access_token",
									"",
									"if (token) {",
									"    pm.environment.set(\"principal_token\", token)",
									"}",
									"",
									"pm.test(\"Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access Token Present\", function () {",
									"    pm.expect(token.length > 0).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "school_demo_nodejs",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "principal_user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "principal_password",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "tT5LRe7FlL1ByzyoQMMfTMByv9SkUjIh",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_id",
									"value": "School_demo_nodejs",
									"type": "text",
									"disabled": true
								},
								{
									"key": "realm_public_key",
									"value": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA05I4tV0gdYcV/Tic8xWLozHr4phEM4ZG+AGxjGX708tsJp82pShgNTZj9W9j2wsH1kXroKIpDcY5Vmqds8DPYRXSWUZUj9UcRuGMoBfYaXSy5KyuNOLXbpes/nKW5yOVM+uwczPKV+EOB4xswCVmUF/tji4oTuKKi+aYXP+oWnOjyrwRfGWaSgKX9dysD72bpFwT/oMsEvpr9FHcuw7emElSa9ahpOgagMkAhPkvAf7NAWYEsstdNC5Qdsl5aVk5t7nxKdWM1NZtuI2tj+nwtl4EfMNMNigu1ByOSNIBMiEBAj075ROalUSE2w/j5zbN5vq4sFj6h1dl2+PV8Kk7UwIDAQAB",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://keycloak:8080/auth/realms/school_demo/protocol/openid-connect/token",
							"protocol": "http",
							"host": [
								"keycloak"
							],
							"port": "8080",
							"path": [
								"auth",
								"realms",
								"school_demo",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Teacher Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let token = response.access_token",
									"",
									"pm.environment.set(\"teacher_token\", token)",
									"",
									"pm.test(\"Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access Token Present\", function () {",
									"    pm.expect(token.length > 0).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "school_demo_nodejs",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "teacher_user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "teacher_password",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "bfe59526-26e6-40d4-93ba-bfb7fa8cf4ab",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:8080/auth/realms/school_demo/protocol/openid-connect/token",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"realms",
								"school_demo",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Student Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let token = response.access_token",
									"",
									"pm.environment.set(\"student_token\", token)",
									"",
									"pm.test(\"Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access Token Present\", function () {",
									"    pm.expect(token.length > 0).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "school_demo_nodejs",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "mitchell_hole",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "bfe59526-26e6-40d4-93ba-bfb7fa8cf4ab",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "localhost:8080/auth/realms/school_demo/protocol/openid-connect/token",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"realms",
								"school_demo",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Students",
			"item": [
				{
					"name": "Create Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"let id = response.id",
									"",
									"if (id) {",
									"    pm.environment.set(\"student_id\", id)",
									"}",
									"",
									"pm.test(\"Create Student - Status Test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Create Student - Correct Data\", function () {",
									"    pm.expect(response.name).to.eql(req.name);",
									"    pm.expect(response.student_number).to.eql(req.student_number);",
									"    pm.expect(response.grade).to.eql(req.grade);",
									"    pm.expect(response.is_graduated).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Ddasasdfdf\",\n    \"grade\": 10,\n    \"student_number\": \"330436780\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"let id = response.id",
									"",
									"pm.environment.set(\"student_id\", id)",
									"",
									"pm.test(\"Update Student - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Update Student - Correct Data\", function () {",
									"    pm.expect(response.name).to.eql(req.name);",
									"    pm.expect(response.student_number).to.eql(req.student_number);",
									"    pm.expect(response.grade).to.eql(req.grade);",
									"    pm.expect(response.is_graduated).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mitchell Hole\",\n    \"grade\": 12,\n    \"student_number\": \"123456789\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/students/{{student_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"{{student_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Students - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"pm.test(\"Get Student - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Student - Correct Data\", function () {",
									"    pm.expect(response).to.have.all.keys('id', 'name', 'grade', 'student_number', 'is_graduated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{student_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/{{student_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"{{student_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update student graduation status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"pm.test(\"Get Student - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Student - Correct Data\", function () {",
									"    pm.expect(response).to.have.all.keys('id', 'name', 'grade', 'student_number', 'is_graduated');",
									"    pm.expect(response.is_grauduated).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{base_url}}/students/{{student_id}}/graduate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"students",
								"{{student_id}}",
								"graduate"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{principal_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Teachers",
			"item": [
				{
					"name": "Create Teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"let id = response.id",
									"",
									"if (id) {",
									"    pm.environment.set(\"teacher_id\", id)",
									"}",
									"",
									"pm.test(\"Create Teacher - Status Test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Create Teacher - Correct Data\", function () {",
									"    pm.expect(response.name).to.eql(req.name);",
									"    pm.expect(response.subject).to.eql(req.subject);",
									"    pm.expect(response.started_at).to.eql(req.started_at);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Barney Rubble\",\n    \"subject\": \"ENG\",\n    \"started_at\": \"2010-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/teachers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"pm.test(\"Update Teacher - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Update Teachert - Correct Data\", function () {",
									"    pm.expect(response.name).to.eql(req.name);",
									"    pm.expect(response.subject).to.eql(req.subject);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Fred Flintstone\",\n    \"subject\": \"MATH\",\n    \"started_at\": \"1999-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/teachers/{{teacher_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"{{teacher_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Teachers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Students - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Get Teacher - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Teacher - Correct Data\", function () {",
									"    pm.expect(response).to.have.all.keys('id', 'name', 'subject', 'started_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teachers/{{teacher_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teachers",
								"{{teacher_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{principal_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Semesters",
			"item": [
				{
					"name": "Create Semester",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"let id = response.id",
									"",
									"pm.environment.set(\"semester_id\", id)",
									"",
									"pm.test(\"Create Semester - Status Test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Create Semester - Correct Data\", function () {",
									"    pm.expect(response.year).to.eql(req.year);",
									"    pm.expect(response.term).to.eql(req.term);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\": 2021,\n    \"term\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/semesters",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"semesters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Semesters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"",
									"pm.test(\"Get Semesters - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Semester - Correct Data\", function () {",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\": 1999,\n    \"term\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/semesters",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"semesters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current Semester",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"pm.test(\"Get Current Semester - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Current Semester - Correct Data\", function () {",
									"    pm.expect(response).to.have.all.keys('id', 'year', 'term');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\": 1999,\n    \"term\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/semesters/current",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"semesters",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Semester",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"",
									"pm.test(\"Get Semester - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Semester - Correct Data\", function () {",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\": 1999,\n    \"term\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/semesters/{{semester_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"semesters",
								"{{semester_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{principal_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Classes",
			"item": [
				{
					"name": "Create Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"function setClassId(response) {",
									"    let id = response.id",
									"",
									"    if (id) {",
									"        pm.environment.set(\"class_id\", id)",
									"    }",
									"}",
									"",
									"pm.test(\"Create Class - Status Test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Create Class - Correct Data\", function () {",
									"    pm.expect(response.subject).to.eql(req.subject);",
									"    pm.expect(response.grade).to.eql(req.grade);",
									"});",
									"",
									"setClassId(response)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"MATH\",\n    \"grade\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/classes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Get Classes - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Classes - Correct Data\", function () {",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/classes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Get Class - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Class - Correct Data\", function () {",
									"    pm.expect(response).to.have.all.keys('id', 'subject', 'grade');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/classes/{{class_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classes",
								"{{class_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{principal_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Class Offerings",
			"item": [
				{
					"name": "Create Class Offerings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"let id = response.id",
									"",
									"if (id) {",
									"    pm.environment.set(\"class_offering_id\", id)",
									"}",
									"",
									"pm.test(\"Create Class Offering - Status Test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Create Class Offering - Correct Data\", function () {",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"semester_id\": 8,\n    \"teacher_id\": 2,\n    \"class_id\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/classofferings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classofferings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Class Offering",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Get Class Offering - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Class Offering - Correct Data\", function () {",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{base_url}}/classofferings/{{class_offering_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classofferings",
								"{{class_offering_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Class Offerings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Get Class Offerings - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Class Offerings - Correct Data\", function () {",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{base_url}}/classofferings/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classofferings",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{principal_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Class Takings",
			"item": [
				{
					"name": "Create Class Taking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"let req = JSON.parse(request.data);",
									"",
									"let id = response.id",
									"",
									"if (id) {",
									"    pm.environment.set(\"class_taking_id\", id)",
									"}",
									"",
									"pm.test(\"Create Class Taking - Status Test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Create Class Taking - Correct Data\", function () {",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{principal_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"class_offering_id\": 5,\n    \"student_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/classtakings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classtakings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Class Taking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Get Class Taking - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/classtakings/{{class_taking_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classtakings",
								"{{class_taking_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Class Takings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Get Class Takings - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/classtakings/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classtakings",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Class Taking Grade",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json()",
									"",
									"pm.test(\"Update Class Taking Grade - Status Test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"grade\": \"C+\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/classtakings/{{class_taking_id}}/grade",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"classtakings",
								"{{class_taking_id}}",
								"grade"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{student_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}